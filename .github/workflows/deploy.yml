name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: "Deploy to VPS"
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH (normalize & validate key)
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
      
          # Write key and strip any Windows CRLFs that can break OpenSSH
          printf "%s" "${SSH_PRIVATE_KEY}" > ~/.ssh/deploy-key
          sed -i 's/\r$//' ~/.ssh/deploy-key
          chmod 600 ~/.ssh/deploy-key
      
          # Validate the private key parses correctly (fails fast if malformed)
          ssh-keygen -y -f ~/.ssh/deploy-key > /dev/null
      
          # Write SSH config
          cat > ~/.ssh/config <<EOF
          Host my-vps
            HostName ${SSH_IP}
            User ${SSH_USER}
            IdentityFile ~/.ssh/deploy-key
            IdentitiesOnly yes
            StrictHostKeyChecking no
          EOF
      
          # Show quick sanity (donâ€™t print the key)
          echo "Key bytes:" $(wc -c < ~/.ssh/deploy-key)
          echo "Config OK:"
          sed 's/IdentityFile .*/IdentityFile (hidden)/' ~/.ssh/config
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_IP: ${{ secrets.SSH_IP }}


      - name: Test SSH connection
        run: |
          echo "### Testing SSH connectivity..."
          ssh -v my-vps "whoami && hostname && echo CONNECTED_OK"

      - name: Print project directory info
        run: |
          echo "### Checking project directory..."
          ssh my-vps "echo PROJECT_ROOT='${{ secrets.PROJECT_ROOT }}'; ls -la '${{ secrets.PROJECT_ROOT }}' || echo 'Directory not found!'"

      - name: Deploy commands
        run: |
          echo "### Starting deploy..."
          ssh my-vps <<'EOSSH'
            set -e
            echo "PWD before cd: $(pwd)"
            cd '${{ secrets.PROJECT_ROOT }}'
            echo "PWD after cd: $(pwd)"
            echo "### Listing files in project root..."
            ls -la

            # === Your real deploy steps go here ===
            # Example: git pull + restart service or docker compose
            # git pull --rebase
            # systemctl restart your-service-name

            # If using docker compose:
            # docker compose pull
            # docker compose up -d
            # docker compose ps

            echo "### DEPLOY DONE"
          EOSSH
